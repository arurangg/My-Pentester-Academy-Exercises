#!/usr/bin/env python

import socket
import struct
import binascii

def printETH(header):
	eth = struct.unpack("!6s6s2s", header)
	print "ETHERNET Header:"
	dst = binascii.hexlify(eth[0])
	src = binascii.hexlify(eth[1])
	print "\tDest. Host: {0}".format(':'.join(dst[i:i+2] for i in range(0, len(dst), 2)))
	print "\tSource. Host: {0}".format(':'.join(src[i:i+2] for i in range(0, len(src),2)))
	print "\tEth type: {0}".format(binascii.hexlify(eth[2]))

def printIP(header):
	ip = struct.unpack("!12s4s4s",header)
	print "IP Header:"
	print "\tSrc Addr: {0}".format(socket.inet_ntoa(ip[1]))
	print "\tDst Addr: {0}".format(socket.inet_ntoa(ip[2]))

def printTCP(header):
	tcp = struct.unpack("!2s2s4s4s8s",header)
	print "TCP Header:"
	print "\tSrc Port: {0}".format(int(binascii.hexlify(tcp[0]),16))
	print "\tDst Port: {0}".format(int(binascii.hexlify(tcp[1]),16))
	print "\tSeq Numb: {0}".format(int(binascii.hexlify(tcp[2]),16))
	print "\tAck Numb: {0}".format(int(binascii.hexlify(tcp[3]),16))

print "Press Enter.."

rawSocket = socket.socket(socket.PF_PACKET, socket.SOCK_RAW, socket.htons(0x0800))

pkt = rawSocket.recvfrom(2048)

eth_hdr_end = 14
ip_hdr_end = eth_hdr_end + 20
tcp_hdr_end = ip_hdr_end + 20

eth_hdr = pkt[0][0:eth_hdr_end]
ip_hdr = pkt[0][eth_hdr_end:ip_hdr_end]
tcp_hdr = pkt[0][ip_hdr_end:tcp_hdr_end]

printETH(eth_hdr)
printIP(ip_hdr)
printTCP(tcp_hdr)

