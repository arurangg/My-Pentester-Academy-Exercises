#!/usr/bin/env python

import socket
import struct
import binascii
from signal import SIGINT, signal

def sig_handler(signal_number, interrupted_stack_frame):
        print "\nSIGINT received..Bye Bye"
	sys.exit(0)

def printETH(header):
	eth = struct.unpack("!6s6s2s", header)
	dst = binascii.hexlify(eth[0])
	src = binascii.hexlify(eth[1])
	eth_type = binascii.hexlify(eth[2])

	if eth_type != "0800":
                return False
	print "ETHERNET Header:"
	print "\tDest. Host: {0}".format(':'.join(dst[i:i+2] for i in range(0, len(dst), 2)))
	print "\tSource. Host: {0}".format(':'.join(src[i:i+2] for i in range(0, len(src),2)))
	print "\tEth type: {0}".format(eth_type)
	return True

def printIP(header):
	ip = struct.unpack("!9s1s2s4s4s",header)
	if binascii.hexlify(ip[1]) != "06":
                return False
	print "IP Header:"
	print "\tSrc Addr: {0}".format(socket.inet_ntoa(ip[3]))
	print "\tDst Addr: {0}".format(socket.inet_ntoa(ip[4]))
	return True

def printTCP(header):
	tcp = struct.unpack("!2s2s4s4s8s",header)
	if int(binascii.hexlify(tcp[1]),16) != 80 and int(binascii.hexlify(tcp[1]),16) != 80:
                return False
	print "TCP Header:"
	print "\tSrc Port: {0}".format(int(binascii.hexlify(tcp[0]),16))
	print "\tDst Port: {0}".format(int(binascii.hexlify(tcp[1]),16))
	print "\tSeq Numb: {0}".format(int(binascii.hexlify(tcp[2]),16))
	print "\tAck Numb: {0}".format(int(binascii.hexlify(tcp[3]),16))
	return True


def printHTTP(header):
	print "HTTP:"
	print header


signal(SIGINT, sig_handler)

rawSocket = socket.socket(socket.PF_PACKET, socket.SOCK_RAW, socket.htons(0x0800))

eth_hdr_end = 14
ip_hdr_end = eth_hdr_end + 20
tcp_hdr_end = ip_hdr_end + 20

while True:
	pkt = rawSocket.recvfrom(2048)

	eth_hdr = pkt[0][0:eth_hdr_end]
	if printETH(eth_hdr):
		ip_hdr = pkt[0][eth_hdr_end:ip_hdr_end]
		if printIP(ip_hdr):
			tcp_hdr = pkt[0][ip_hdr_end:tcp_hdr_end]
			if printTCP(tcp_hdr):
				http_hdr = pkt[0][tcp_hdr_end:]
				printHTTP(http_hdr)

